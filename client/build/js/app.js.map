{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","client/src/scripts/core/core.js","app.js","client/src/scripts/auth/auth.js","client/src/scripts/auth/controllers/AuthController.js","client/src/scripts/auth/services/account.js","client/src/scripts/auth/services/session.js","client/src/scripts/build/build.js","client/src/scripts/build/controllers/BuildController.js","client/src/scripts/build/services/builds.js","client/src/scripts/core/directives/loader.js","client/src/scripts/core/directives/stateClassName.js","client/src/scripts/core/factories/modal.js","client/src/scripts/core/services/loading.js","client/src/scripts/home/controllers/HomeController.js","client/src/scripts/home/home.js","client/src/scripts/navigation/directives/heimdallNavigation.js","client/src/scripts/navigation/navigation.js","client/src/scripts/project/controllers/ProjectController.js","client/src/scripts/project/project.js","client/src/scripts/project/services/projects.js","client/src/scripts/user/controllers/RemoveUserController.js","client/src/scripts/user/controllers/UserController.js","client/src/scripts/user/services/users.js","client/src/scripts/user/user.js","client/src/scripts/version/services/versions.js","client/src/scripts/version/version.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\r\n\r\nrequire('../auth/auth');\r\nrequire('../home/home');\r\nrequire('../project/project');\r\nrequire('../version/version');\r\nrequire('../build/build');\r\nrequire('../user/user');\r\nrequire('../navigation/navigation');\r\n\r\nangular.module('heimdall', [\r\n    'ngTouch',\r\n    'ngSanitize',\r\n    'ui.router',\r\n    'pascalprecht.translate',\r\n    'vButton','vModal',\r\n    'home', 'version', 'build', 'auth', 'project', 'navigation', 'user'])\r\n    .constant('WS_ROOT_URL', 'http://localhost:3000/api/')\r\n    .directive('stateClassName', require('./directives/stateClassName'))\r\n    .directive('loader', require('./directives/loader'))\r\n    .service('loading', require('./services/loading'))\r\n    .factory('modal', require('./factories/modal'))\r\n\r\n    .config(function ($urlRouterProvider, $translateProvider, $animateProvider) {\r\n\r\n        // Remove animation on all ng-if and ng-repeat\r\n        $animateProvider.classNameFilter(/bi-animate/);\r\n\r\n        $urlRouterProvider.otherwise('/auth');\r\n\r\n        /**\r\n         * The provider the the traducer module\r\n         */\r\n        $translateProvider.useStaticFilesLoader({\r\n            prefix: 'i18n/',\r\n            suffix: '.json'\r\n        });\r\n        $translateProvider.useSanitizeValueStrategy('escaped');\r\n        $translateProvider.preferredLanguage('fr_FR');\r\n    })\r\n;\r\n\r\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\r\n\r\nrequire('../auth/auth');\r\nrequire('../home/home');\r\nrequire('../project/project');\r\nrequire('../version/version');\r\nrequire('../build/build');\r\nrequire('../user/user');\r\nrequire('../navigation/navigation');\r\n\r\nangular.module('heimdall', [\r\n    'ngTouch',\r\n    'ngSanitize',\r\n    'ui.router',\r\n    'pascalprecht.translate',\r\n    'vButton','vModal',\r\n    'home', 'version', 'build', 'auth', 'project', 'navigation', 'user'])\r\n    .constant('WS_ROOT_URL', 'http://localhost:3000/api/')\r\n    .directive('stateClassName', require('./directives/stateClassName'))\r\n    .directive('loader', require('./directives/loader'))\r\n    .service('loading', require('./services/loading'))\r\n    .factory('modal', require('./factories/modal'))\r\n\r\n    .config(function ($urlRouterProvider, $translateProvider, $animateProvider) {\r\n\r\n        // Remove animation on all ng-if and ng-repeat\r\n        $animateProvider.classNameFilter(/bi-animate/);\r\n\r\n        $urlRouterProvider.otherwise('/auth');\r\n\r\n        /**\r\n         * The provider the the traducer module\r\n         */\r\n        $translateProvider.useStaticFilesLoader({\r\n            prefix: 'i18n/',\r\n            suffix: '.json'\r\n        });\r\n        $translateProvider.useSanitizeValueStrategy('escaped');\r\n        $translateProvider.preferredLanguage('fr_FR');\r\n    })\r\n;\r\n\r\n\n},{\"../auth/auth\":2,\"../build/build\":6,\"../home/home\":14,\"../navigation/navigation\":16,\"../project/project\":18,\"../user/user\":23,\"../version/version\":26,\"./directives/loader\":9,\"./directives/stateClassName\":10,\"./factories/modal\":11,\"./services/loading\":12}],2:[function(require,module,exports){\n'use strict';\r\n\r\nangular.module('auth', [])\r\n    .controller('AuthController', require('./controllers/AuthController'))\r\n    .service('account', require('./services/account'))\r\n    .service('session', require('./services/session'))\r\n    .run(function(session) {\r\n        session.init();\r\n    })\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('auth', {\r\n            url: '/auth',\r\n            templateUrl: 'auth/partials/auth.html',\r\n            controller: 'AuthController'\r\n        });\r\n    })\r\n;\r\n\r\n\n},{\"./controllers/AuthController\":3,\"./services/account\":4,\"./services/session\":5}],3:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($scope, $state, account) {\r\n\r\n    $scope.user = {\r\n        email: 'admin@peashooter.com',\r\n        password: 'admin'\r\n    };\r\n\r\n    $scope.submit = function submit() {\r\n        // Check if the form is valid\r\n        if($scope.authForm.$invalid) {\r\n            return;\r\n        }\r\n        $scope.logInProgress = true;\r\n        account.authUser($scope.user.email, $scope.user.password)\r\n            .then(function() {\r\n                $state.go('home');\r\n                $scope.logInProgress = false;\r\n            }, function() {\r\n                // Error case\r\n                $scope.logInProgress = false;\r\n            });\r\n\r\n    };\r\n};\r\n\n},{}],4:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($http, $q, WS_ROOT_URL) {\r\n    var service = {};\r\n    var urlAuh = WS_ROOT_URL + 'users/auth/';\r\n    var user;\r\n\r\n    // Get the user if exist in localstorage\r\n    if(localStorage.getItem('user')) {\r\n        user = JSON.parse(localStorage.getItem('user'));\r\n    }\r\n\r\n    /**\r\n     * Get the current user logged on the platform\r\n     * @returns {{name: string, firstname: string, email: string}}\r\n     */\r\n    service.getUser = function getUser() {\r\n        return user;\r\n    };\r\n\r\n    /**\r\n     * Check if the user email and password are correct combination\r\n     * @param email\r\n     * @param password\r\n     */\r\n    service.authUser = function authUser(email, password) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'POST',\r\n            url: urlAuh,\r\n            data: {\r\n                email: email,\r\n                password: password\r\n            }\r\n        }).then(function(response) {\r\n            service.saveLocalStorage(response.data);\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n            deferred.reject();\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Save the user in params into the localStorage\r\n     * @param userToSave\r\n     */\r\n    service.saveLocalStorage = function saveLocalStorage(userToSave) {\r\n        user = userToSave;\r\n        localStorage.setItem('user', JSON.stringify(userToSave));\r\n    };\r\n\r\n    /**\r\n     * Destroy the user in the service AND in the localStorage\r\n     */\r\n    service.logout = function logout() {\r\n        localStorage.removeItem('user');\r\n        user = undefined;\r\n    };\r\n\r\n    return service;\r\n};\r\n\n},{}],5:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($rootScope, $state, account) {\r\n    var service = {};\r\n\r\n    service.init = function init() {\r\n        service.checkAndRedirect($state.current.name);\r\n        $rootScope.$on('$stateChangeStart', function (event, toState) {\r\n            service.checkAndRedirect(toState.name);\r\n        });\r\n    };\r\n\r\n    service.checkAndRedirect = function checkAndRedirect(stateName) {\r\n        // Check if a user exist in the session\r\n        if(!account.getUser() && stateName !== 'auth') {\r\n            // If not we send the user on the auth page\r\n            $state.go('auth');\r\n        }\r\n    };\r\n\r\n    return service;\r\n};\n},{}],6:[function(require,module,exports){\n'use strict';\r\n\r\nangular.module('build', [])\r\n    .controller('BuildController', require('./controllers/BuildController'))\r\n    .service('builds', require('./services/builds'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('build', {\r\n            url: '/build',\r\n            templateUrl: 'build/partials/build.html',\r\n            controller: 'BuildController'\r\n        });\r\n    })\r\n;\r\n\r\n\n},{\"./controllers/BuildController\":7,\"./services/builds\":8}],7:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function() {\r\n\r\n};\r\n\n},{}],8:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'builds/';\r\n    var builds = [];\r\n\r\n    /**\r\n     * Get all builds for the project in params\r\n     * @param project\r\n     */\r\n    service.getBuildsByProject = function getBuildsByProject(project) {\r\n        var deferred = $q.defer();\r\n\r\n        if(builds[project.id]) {\r\n            deferred.resolve(builds[project.id]);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            params: {\r\n                /*jshint camelcase:false*/\r\n                projectId: project.id\r\n            }\r\n        }).then(function(response) {\r\n            builds[project.id] = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Only in cache memory\r\n     */\r\n    service.getAllBuilds = function getAllBuilds() {\r\n        var agreBuilds = [];\r\n\r\n        for(var i = 0; i<builds.length; i++) {\r\n            agreBuilds.push(builds[i]);\r\n        }\r\n        return agreBuilds;\r\n    };\r\n\r\n    return service;\r\n};\r\n\n},{}],9:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($state, loading) {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        link: function (scope) {\r\n\r\n            function testIfSecure(stateName) {\r\n                if (stateName !== 'auth' && stateName) {\r\n                    scope.display = true;\r\n                    loading.init()\r\n                        .then(function() {\r\n                            scope.display = false;\r\n                        });\r\n                } else {\r\n                    scope.display = false;\r\n                }\r\n            }\r\n            testIfSecure($state.current.name);\r\n\r\n            /**\r\n             * Listen when we change to another state\r\n             * So add a className based on the current path\r\n             */\r\n            scope.$on('$stateChangeStart', function (e, toState) {\r\n                testIfSecure(toState.name);\r\n            });\r\n        },\r\n        templateUrl: 'core/partials/loader.html'\r\n    };\r\n};\r\n\n},{}],10:[function(require,module,exports){\n/**\r\n * stateClassName directive\r\n * Bind a custom class based on the current state\r\n */\r\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($state) {\r\n    /**\r\n     * Construct a className based on a state and a custom prefix\r\n     * The default one is page-, customize it by adding a value to the directive\r\n     * @param  {String} path   State name\r\n     * @param  {String} prefix Custom prefix\r\n     * @return {String}        ClassName\r\n     */\r\n    function className(path, prefix) {\r\n        path = path || 'root';\r\n        prefix = prefix || 'page-';\r\n        return prefix + path.replace(/\\./g, '-').toLowerCase();\r\n    }\r\n\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, el, attr) {\r\n\r\n            el\r\n                .addClass(className($state.current.name, attr.stateClassName));\r\n\r\n            /**\r\n             * Listen when we change to another state\r\n             * So add a className based on the current path\r\n             */\r\n            scope.$on('$stateChangeStart', function (e, toState, current, previousState) {\r\n\r\n                el\r\n                    .removeClass('page-root')\r\n                    .removeClass(className(previousState.name, attr.stateClassName))\r\n                    .addClass(className(toState.name, attr.stateClassName));\r\n\r\n            });\r\n        }\r\n    };\r\n};\r\n\n},{}],11:[function(require,module,exports){\n'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function (vModal) {\r\n    var service = {};\r\n    service.model = {};\r\n\r\n    service.view = function(params) {\r\n\r\n        if(params) {\r\n            service.instance = vModal(params);\r\n        }\r\n        if(!service.instance){\r\n            console.log('This modal was not instanciated yet');\r\n        }\r\n        return service.instance;\r\n    };\r\n\r\n    return service;\r\n};\r\n\n},{}],12:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($q, account, projects, versions, builds, users) {\r\n    var service = {};\r\n\r\n    /**\r\n     * Init all the service\r\n     */\r\n    service.init = function init() {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        var projectsLoaded = false;\r\n        var usersLoaded = false;\r\n\r\n        service.loadProject().then(function () {\r\n            projectsLoaded = true;\r\n            if(usersLoaded) {\r\n                deferred.resolve();\r\n            }\r\n        });\r\n\r\n        service.loadUsers().then(function() {\r\n            usersLoaded = true;\r\n            if(projectsLoaded) {\r\n                deferred.resolve();\r\n            }\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadProject = function loadProject() {\r\n        var deferred = $q.defer();\r\n        var versionsOk = false;\r\n        var buildsOk = false;\r\n\r\n        projects.getProjects(account.getUser())\r\n            .then(function (projects) {\r\n                if (projects.length === 0) {\r\n                    console.log('Projects are Loaded (empty)');\r\n                    deferred.resolve();\r\n                }\r\n\r\n                service.loadVersions(projects).then(function() {\r\n                    versionsOk = true;\r\n                    if(buildsOk) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n\r\n                service.loadBuilds(projects).then(function() {\r\n                    buildsOk = true;\r\n                    if(versionsOk) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n            });\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadBuilds = function loadBuilds(projects) {\r\n        var deferred = $q.defer();\r\n        var projectCpt = 0;\r\n\r\n        for (var i = 0; i < projects.length; i++) {\r\n            var project = projects[i];\r\n            builds.getBuildsByProject(project)\r\n                .then(function () {\r\n                    projectCpt++;\r\n                    if (projectCpt >= projects.length) {\r\n                        console.log('Build are loaded');\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n        }\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadVersions = function loadVersions(projects) {\r\n        var deferred = $q.defer();\r\n        var projectCpt = 0;\r\n\r\n        for (var i = 0; i < projects.length; i++) {\r\n            var project = projects[i];\r\n            versions.getVersionsByProjects(project)\r\n                .then(function () {\r\n                    projectCpt++;\r\n                    if (projectCpt >= projects.length) {\r\n                        console.log('Version are loaded');\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n        }\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadUsers = function loadUsers() {\r\n        var deferred = $q.defer();\r\n        users.getUsers().then(function(){\r\n            deferred.resolve();\r\n        });\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n\r\n\n},{}],13:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($scope, projects, versions, builds) {\r\n\r\n    // Get count project\r\n    projects.getProjects().then(function(projects) {\r\n        $scope.countProject = projects.length;\r\n        if($scope.countProject) {\r\n            $scope.countVersion = versions.getAllVersions().length / $scope.countProject;\r\n            $scope.countBuild = builds.getAllBuilds().length / $scope.countProject;\r\n        } else {\r\n            $scope.countVersion = 0;\r\n            $scope.countBuild = 0;\r\n        }\r\n    });\r\n};\r\n\n},{}],14:[function(require,module,exports){\n'use strict';\r\n\r\nangular.module('home', [])\r\n    .controller('HomeController', require('./controllers/HomeController'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('home', {\r\n            url: '/',\r\n            templateUrl: 'home/partials/home.html',\r\n            controller: 'HomeController'\r\n        });\r\n    })\r\n;\r\n\r\n\n},{\"./controllers/HomeController\":13}],15:[function(require,module,exports){\n'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function (account) {\r\n    return {\r\n        replace: true,\r\n        controllerAs: 'NavigationController',\r\n        controller: function($scope, $state){\r\n\r\n            /**\r\n             * Test if the menu navigation must be displayed on this state\r\n             * @returns {boolean}\r\n             */\r\n            $scope.navigationActive = function navigationActive() {\r\n                return !$state.is('auth');\r\n            };\r\n\r\n            /**\r\n             * Logout the user, destroy the session and redirect to the auth page\r\n             */\r\n            $scope.logout = function logout() {\r\n                account.logout();\r\n                $state.go('auth');\r\n            };\r\n\r\n            /**\r\n             * Check if the item in the menu is linked to a state\r\n             * @param item\r\n             * @returns {boolean}\r\n             */\r\n            $scope.itemIsSelected = function itemIsSelected(item) {\r\n                return $state.current.name.indexOf(item) >= 0;\r\n            };\r\n\r\n            /**\r\n             * When the menu appear\r\n             */\r\n            $scope.appear = function appear() {\r\n                var user = account.getUser();\r\n                $scope.account = user;\r\n            };\r\n\r\n            /**\r\n             * Get the avatar from gravatar\r\n             * @returns {string}\r\n             */\r\n            $scope.getAvatar = function getAvatar() {\r\n                if($scope.account) {\r\n                    return 'https://secure.gravatar.com/avatar/' + CryptoJS.MD5($scope.account.email) + '?d=mm';\r\n                }\r\n            };\r\n\r\n        },\r\n        templateUrl: 'navigation/partials/heimdall-navigation.html'\r\n    };\r\n};\r\n\n},{}],16:[function(require,module,exports){\n'use strict';\r\n\r\nangular.module('navigation', [])\r\n    .directive('heimdallNavigation', require('./directives/heimdallNavigation'))\r\n\r\n;\r\n\r\n\n},{\"./directives/heimdallNavigation\":15}],17:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($scope, projects, account) {\r\n\r\n    $scope.newProject = {};\r\n\r\n    projects.getProjects(account.getUser()).then(function(projects){\r\n        $scope.projects = projects;\r\n    });\r\n\r\n    /**\r\n     * Open the panel for create project\r\n     */\r\n    $scope.newProject = function newProject() {\r\n        $scope.open = true;\r\n    };\r\n\r\n    /**\r\n     * Close the panel for create project\r\n     */\r\n    $scope.closeProject = function closeProject() {\r\n        $scope.open = false;\r\n    };\r\n\r\n    $scope.goBuild = function(build) {\r\n        $state.go('build');\r\n    };\r\n\r\n    /**\r\n     * Create project\r\n     */\r\n    $scope.createProject = function createProject() {\r\n\r\n        if($scope.newProjectForm.$invalid) {\r\n            return;\r\n        }\r\n\r\n        $scope.createLoading = true;\r\n        projects.createProject(account.getUser(), $scope.newProject)\r\n            .then(function() {\r\n                $scope.createLoading = false;\r\n                $scope.open = false;\r\n            }, function() {\r\n                $scope.createLoading = false;\r\n            });\r\n    };\r\n};\r\n\n},{}],18:[function(require,module,exports){\n'use strict';\r\n\r\nangular.module('project', [])\r\n    .controller('ProjectController', require('./controllers/ProjectController'))\r\n    .service('projects', require('./services/projects'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('project', {\r\n            url: '/project',\r\n            templateUrl: 'project/partials/project.html',\r\n            controller: 'ProjectController'\r\n        });\r\n    })\r\n;\r\n\r\n\n},{\"./controllers/ProjectController\":17,\"./services/projects\":19}],19:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL, account) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'projects/';\r\n    var projects;\r\n\r\n    service.getProjects = function getProjects(user) {\r\n        var deferred = $q.defer();\r\n\r\n        if(!user) {\r\n            user = account.getUser();\r\n        }\r\n\r\n        if(projects) {\r\n            deferred.resolve(projects);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            data: {\r\n                /*jshint camelcase:false*/\r\n                user_id: user.id\r\n            }\r\n        }).then(function(response) {\r\n            projects = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.createProject = function createProject(user, project) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'POST',\r\n            url: url,\r\n            data: {\r\n                /*jshint camelcase:false*/\r\n                admin_id: user.id,\r\n                title: project.title\r\n            }\r\n        }).then(function(response) {\r\n            deferred.resolve(response.data);\r\n            projects.push(response.data);\r\n        }, function() {\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n\n},{}],20:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($scope, modal, users) {\r\n\r\n    /**\r\n     * The user has close the modal without any action\r\n     */\r\n    $scope.close = function close() {\r\n        modal.view().deactivate();\r\n    };\r\n\r\n    $scope.confirm = function confirm() {\r\n        users.deleteUser(modal.user).then(function() {\r\n            modal.view().deactivate();\r\n        });\r\n    };\r\n};\r\n\n},{}],21:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($scope, users, account, modal) {\r\n    $scope.newUser = {};\r\n\r\n    users.getUsers().then(function (users) {\r\n        $scope.users = users;\r\n    });\r\n\r\n    $scope.isCurrentUser = function isCurrentUser(user) {\r\n        if (account.getUser().id === user.id) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    $scope.createUser = function createUser() {\r\n        if ($scope.newUserForm.$invalid) {\r\n            return;\r\n        }\r\n        $scope.createLoading = true;\r\n        users.createUser($scope.newUser)\r\n            .then(function () {\r\n                $scope.createLoading = false;\r\n                $scope.open = false;\r\n            }, function () {\r\n                $scope.createLoading = false;\r\n            });\r\n    };\r\n\r\n    $scope.editUser = function editUser(user) {\r\n        $scope.open = true;\r\n        $scope.newUser = angular.copy(user);\r\n    };\r\n\r\n    $scope.openNewUser = function openNewUser() {\r\n        $scope.open = true;\r\n        // Reset validation\r\n        $scope.newUserForm.$setPristine();\r\n        $scope.newUser = {};\r\n    };\r\n\r\n    $scope.validEditUser = function validEditUser() {\r\n        if ($scope.newUserForm.$invalid) {\r\n            return;\r\n        }\r\n\r\n        $scope.createLoading = true;\r\n        users.updateUser($scope.newUser).then(function (user) {\r\n            $scope.createLoading = false;\r\n            $scope.open = false;\r\n\r\n            // Update the scope\r\n            for (var i = 0; i < $scope.users.length; i++) {\r\n                if($scope.users[i].id === $scope.newUser.id) {\r\n                    $scope.users[i] = user;\r\n                }\r\n            }\r\n        }, function () {\r\n            $scope.createLoading = false;\r\n        });\r\n    };\r\n\r\n    $scope.cancelEditUser = function cancelEditUser() {\r\n        $scope.open = false;\r\n    };\r\n\r\n    $scope.removeUser = function removeUser(user) {\r\n        modal.user = user;\r\n        modal.view({\r\n            controller: 'RemoveUserController',\r\n            templateUrl: 'user/partials/remove-user.html'\r\n        }).activate();\r\n    };\r\n};\r\n\n},{}],22:[function(require,module,exports){\n'use strict';\r\n\r\nmodule.exports = function($http, $q, WS_ROOT_URL) {\r\n    var url = WS_ROOT_URL + 'users/';\r\n    var service = {};\r\n    var users;\r\n\r\n    service.getUsers = function getUsers() {\r\n        var deferred = $q.defer();\r\n\r\n        if(users) {\r\n            deferred.resolve(users);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url\r\n        }).then(function(response) {\r\n            users = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n            deferred.reject();\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n\r\n    service.createUser = function createUser(user) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'POST',\r\n            url: url,\r\n            data: user\r\n        }).then(function(response) {\r\n            deferred.resolve(response.data);\r\n            users.push(response.data);\r\n        }, function() {\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.updateUser = function updateUser(user) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'PUT',\r\n            url: url + user.id,\r\n            data: user\r\n        }).then(function(response) {\r\n\r\n            var position = users.indexOf(user);\r\n            users[position] = response.data;\r\n            deferred.resolve(response.data);\r\n\r\n        }, function() {\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n\r\n    service.deleteUser = function deleteUser(user) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'DELETE',\r\n            url: url + user.id\r\n        }).then(function(response) {\r\n\r\n            var position = users.indexOf(user);\r\n            users.splice(position, 1);\r\n            deferred.resolve(response.data);\r\n\r\n        }, function() {\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n\n},{}],23:[function(require,module,exports){\n'use strict';\r\n\r\nangular.module('user', [])\r\n    .controller('UserController', require('./controllers/UserController'))\r\n    .controller('RemoveUserController', require('./controllers/RemoveUserController'))\r\n    .service('users', require('./services/users'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('user', {\r\n            url: '/user',\r\n            templateUrl: 'user/partials/user.html',\r\n            controller: 'UserController'\r\n        });\r\n    })\r\n;\r\n\r\n\n},{\"./controllers/RemoveUserController\":20,\"./controllers/UserController\":21,\"./services/users\":22}],24:[function(require,module,exports){\nmodule.exports=require(7)\n},{\"C:\\\\cygwin64\\\\home\\\\Exod\\\\Heimdall\\\\client\\\\src\\\\scripts\\\\build\\\\controllers\\\\BuildController.js\":7}],25:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'versions/';\r\n    var versions = [];\r\n\r\n    /**\r\n     * Get all versions for the project in params\r\n     * @param project\r\n     */\r\n    service.getVersionsByProjects = function getVersionsByProjects(project) {\r\n        var deferred = $q.defer();\r\n\r\n        if(versions[project.id]) {\r\n            deferred.resolve(versions[project.id]);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            params: {\r\n                /*jshint camelcase:false*/\r\n                projectId: project.id\r\n            }\r\n        }).then(function(response) {\r\n            versions[project.id] = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Only in cache memory\r\n     */\r\n    service.getAllVersions = function getAllVersions() {\r\n        var agreVersions = [];\r\n\r\n        for(var i = 0; i<versions.length; i++) {\r\n            agreVersions.push(versions[i]);\r\n        }\r\n        return agreVersions;\r\n    };\r\n\r\n    return service;\r\n};\r\n\n},{}],26:[function(require,module,exports){\n'use strict';\r\n\r\nangular.module('version', [])\r\n    .controller('VersionController', require('./controllers/VersionController'))\r\n    .service('versions', require('./services/versions'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('version', {\r\n            url: '/version',\r\n            templateUrl: 'version/partials/version.html',\r\n            controller: 'VersionController'\r\n        });\r\n    })\r\n;\r\n\r\n\n},{\"./controllers/VersionController\":24,\"./services/versions\":25}]},{},[1])\n\n","'use strict';\r\n\r\nangular.module('auth', [])\r\n    .controller('AuthController', require('./controllers/AuthController'))\r\n    .service('account', require('./services/account'))\r\n    .service('session', require('./services/session'))\r\n    .run(function(session) {\r\n        session.init();\r\n    })\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('auth', {\r\n            url: '/auth',\r\n            templateUrl: 'auth/partials/auth.html',\r\n            controller: 'AuthController'\r\n        });\r\n    })\r\n;\r\n\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($scope, $state, account) {\r\n\r\n    $scope.user = {\r\n        email: 'admin@peashooter.com',\r\n        password: 'admin'\r\n    };\r\n\r\n    $scope.submit = function submit() {\r\n        // Check if the form is valid\r\n        if($scope.authForm.$invalid) {\r\n            return;\r\n        }\r\n        $scope.logInProgress = true;\r\n        account.authUser($scope.user.email, $scope.user.password)\r\n            .then(function() {\r\n                $state.go('home');\r\n                $scope.logInProgress = false;\r\n            }, function() {\r\n                // Error case\r\n                $scope.logInProgress = false;\r\n            });\r\n\r\n    };\r\n};\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($http, $q, WS_ROOT_URL) {\r\n    var service = {};\r\n    var urlAuh = WS_ROOT_URL + 'users/auth/';\r\n    var user;\r\n\r\n    // Get the user if exist in localstorage\r\n    if(localStorage.getItem('user')) {\r\n        user = JSON.parse(localStorage.getItem('user'));\r\n    }\r\n\r\n    /**\r\n     * Get the current user logged on the platform\r\n     * @returns {{name: string, firstname: string, email: string}}\r\n     */\r\n    service.getUser = function getUser() {\r\n        return user;\r\n    };\r\n\r\n    /**\r\n     * Check if the user email and password are correct combination\r\n     * @param email\r\n     * @param password\r\n     */\r\n    service.authUser = function authUser(email, password) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'POST',\r\n            url: urlAuh,\r\n            data: {\r\n                email: email,\r\n                password: password\r\n            }\r\n        }).then(function(response) {\r\n            service.saveLocalStorage(response.data);\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n            deferred.reject();\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Save the user in params into the localStorage\r\n     * @param userToSave\r\n     */\r\n    service.saveLocalStorage = function saveLocalStorage(userToSave) {\r\n        user = userToSave;\r\n        localStorage.setItem('user', JSON.stringify(userToSave));\r\n    };\r\n\r\n    /**\r\n     * Destroy the user in the service AND in the localStorage\r\n     */\r\n    service.logout = function logout() {\r\n        localStorage.removeItem('user');\r\n        user = undefined;\r\n    };\r\n\r\n    return service;\r\n};\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($rootScope, $state, account) {\r\n    var service = {};\r\n\r\n    service.init = function init() {\r\n        service.checkAndRedirect($state.current.name);\r\n        $rootScope.$on('$stateChangeStart', function (event, toState) {\r\n            service.checkAndRedirect(toState.name);\r\n        });\r\n    };\r\n\r\n    service.checkAndRedirect = function checkAndRedirect(stateName) {\r\n        // Check if a user exist in the session\r\n        if(!account.getUser() && stateName !== 'auth') {\r\n            // If not we send the user on the auth page\r\n            $state.go('auth');\r\n        }\r\n    };\r\n\r\n    return service;\r\n};","'use strict';\r\n\r\nangular.module('build', [])\r\n    .controller('BuildController', require('./controllers/BuildController'))\r\n    .service('builds', require('./services/builds'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('build', {\r\n            url: '/build',\r\n            templateUrl: 'build/partials/build.html',\r\n            controller: 'BuildController'\r\n        });\r\n    })\r\n;\r\n\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function() {\r\n\r\n};\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'builds/';\r\n    var builds = [];\r\n\r\n    /**\r\n     * Get all builds for the project in params\r\n     * @param project\r\n     */\r\n    service.getBuildsByProject = function getBuildsByProject(project) {\r\n        var deferred = $q.defer();\r\n\r\n        if(builds[project.id]) {\r\n            deferred.resolve(builds[project.id]);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            params: {\r\n                /*jshint camelcase:false*/\r\n                projectId: project.id\r\n            }\r\n        }).then(function(response) {\r\n            builds[project.id] = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Only in cache memory\r\n     */\r\n    service.getAllBuilds = function getAllBuilds() {\r\n        var agreBuilds = [];\r\n\r\n        for(var i = 0; i<builds.length; i++) {\r\n            agreBuilds.push(builds[i]);\r\n        }\r\n        return agreBuilds;\r\n    };\r\n\r\n    return service;\r\n};\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($state, loading) {\r\n    return {\r\n        restrict: 'E',\r\n        replace: true,\r\n        link: function (scope) {\r\n\r\n            function testIfSecure(stateName) {\r\n                if (stateName !== 'auth' && stateName) {\r\n                    scope.display = true;\r\n                    loading.init()\r\n                        .then(function() {\r\n                            scope.display = false;\r\n                        });\r\n                } else {\r\n                    scope.display = false;\r\n                }\r\n            }\r\n            testIfSecure($state.current.name);\r\n\r\n            /**\r\n             * Listen when we change to another state\r\n             * So add a className based on the current path\r\n             */\r\n            scope.$on('$stateChangeStart', function (e, toState) {\r\n                testIfSecure(toState.name);\r\n            });\r\n        },\r\n        templateUrl: 'core/partials/loader.html'\r\n    };\r\n};\r\n","/**\r\n * stateClassName directive\r\n * Bind a custom class based on the current state\r\n */\r\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($state) {\r\n    /**\r\n     * Construct a className based on a state and a custom prefix\r\n     * The default one is page-, customize it by adding a value to the directive\r\n     * @param  {String} path   State name\r\n     * @param  {String} prefix Custom prefix\r\n     * @return {String}        ClassName\r\n     */\r\n    function className(path, prefix) {\r\n        path = path || 'root';\r\n        prefix = prefix || 'page-';\r\n        return prefix + path.replace(/\\./g, '-').toLowerCase();\r\n    }\r\n\r\n    return {\r\n        restrict: 'A',\r\n        link: function (scope, el, attr) {\r\n\r\n            el\r\n                .addClass(className($state.current.name, attr.stateClassName));\r\n\r\n            /**\r\n             * Listen when we change to another state\r\n             * So add a className based on the current path\r\n             */\r\n            scope.$on('$stateChangeStart', function (e, toState, current, previousState) {\r\n\r\n                el\r\n                    .removeClass('page-root')\r\n                    .removeClass(className(previousState.name, attr.stateClassName))\r\n                    .addClass(className(toState.name, attr.stateClassName));\r\n\r\n            });\r\n        }\r\n    };\r\n};\r\n","'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function (vModal) {\r\n    var service = {};\r\n    service.model = {};\r\n\r\n    service.view = function(params) {\r\n\r\n        if(params) {\r\n            service.instance = vModal(params);\r\n        }\r\n        if(!service.instance){\r\n            console.log('This modal was not instanciated yet');\r\n        }\r\n        return service.instance;\r\n    };\r\n\r\n    return service;\r\n};\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($q, account, projects, versions, builds, users) {\r\n    var service = {};\r\n\r\n    /**\r\n     * Init all the service\r\n     */\r\n    service.init = function init() {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        var projectsLoaded = false;\r\n        var usersLoaded = false;\r\n\r\n        service.loadProject().then(function () {\r\n            projectsLoaded = true;\r\n            if(usersLoaded) {\r\n                deferred.resolve();\r\n            }\r\n        });\r\n\r\n        service.loadUsers().then(function() {\r\n            usersLoaded = true;\r\n            if(projectsLoaded) {\r\n                deferred.resolve();\r\n            }\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadProject = function loadProject() {\r\n        var deferred = $q.defer();\r\n        var versionsOk = false;\r\n        var buildsOk = false;\r\n\r\n        projects.getProjects(account.getUser())\r\n            .then(function (projects) {\r\n                if (projects.length === 0) {\r\n                    console.log('Projects are Loaded (empty)');\r\n                    deferred.resolve();\r\n                }\r\n\r\n                service.loadVersions(projects).then(function() {\r\n                    versionsOk = true;\r\n                    if(buildsOk) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n\r\n                service.loadBuilds(projects).then(function() {\r\n                    buildsOk = true;\r\n                    if(versionsOk) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n            });\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadBuilds = function loadBuilds(projects) {\r\n        var deferred = $q.defer();\r\n        var projectCpt = 0;\r\n\r\n        for (var i = 0; i < projects.length; i++) {\r\n            var project = projects[i];\r\n            builds.getBuildsByProject(project)\r\n                .then(function () {\r\n                    projectCpt++;\r\n                    if (projectCpt >= projects.length) {\r\n                        console.log('Build are loaded');\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n        }\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadVersions = function loadVersions(projects) {\r\n        var deferred = $q.defer();\r\n        var projectCpt = 0;\r\n\r\n        for (var i = 0; i < projects.length; i++) {\r\n            var project = projects[i];\r\n            versions.getVersionsByProjects(project)\r\n                .then(function () {\r\n                    projectCpt++;\r\n                    if (projectCpt >= projects.length) {\r\n                        console.log('Version are loaded');\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n        }\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadUsers = function loadUsers() {\r\n        var deferred = $q.defer();\r\n        users.getUsers().then(function(){\r\n            deferred.resolve();\r\n        });\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($scope, projects, versions, builds) {\r\n\r\n    // Get count project\r\n    projects.getProjects().then(function(projects) {\r\n        $scope.countProject = projects.length;\r\n        if($scope.countProject) {\r\n            $scope.countVersion = versions.getAllVersions().length / $scope.countProject;\r\n            $scope.countBuild = builds.getAllBuilds().length / $scope.countProject;\r\n        } else {\r\n            $scope.countVersion = 0;\r\n            $scope.countBuild = 0;\r\n        }\r\n    });\r\n};\r\n","'use strict';\r\n\r\nangular.module('home', [])\r\n    .controller('HomeController', require('./controllers/HomeController'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('home', {\r\n            url: '/',\r\n            templateUrl: 'home/partials/home.html',\r\n            controller: 'HomeController'\r\n        });\r\n    })\r\n;\r\n\r\n","'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function (account) {\r\n    return {\r\n        replace: true,\r\n        controllerAs: 'NavigationController',\r\n        controller: function($scope, $state){\r\n\r\n            /**\r\n             * Test if the menu navigation must be displayed on this state\r\n             * @returns {boolean}\r\n             */\r\n            $scope.navigationActive = function navigationActive() {\r\n                return !$state.is('auth');\r\n            };\r\n\r\n            /**\r\n             * Logout the user, destroy the session and redirect to the auth page\r\n             */\r\n            $scope.logout = function logout() {\r\n                account.logout();\r\n                $state.go('auth');\r\n            };\r\n\r\n            /**\r\n             * Check if the item in the menu is linked to a state\r\n             * @param item\r\n             * @returns {boolean}\r\n             */\r\n            $scope.itemIsSelected = function itemIsSelected(item) {\r\n                return $state.current.name.indexOf(item) >= 0;\r\n            };\r\n\r\n            /**\r\n             * When the menu appear\r\n             */\r\n            $scope.appear = function appear() {\r\n                var user = account.getUser();\r\n                $scope.account = user;\r\n            };\r\n\r\n            /**\r\n             * Get the avatar from gravatar\r\n             * @returns {string}\r\n             */\r\n            $scope.getAvatar = function getAvatar() {\r\n                if($scope.account) {\r\n                    return 'https://secure.gravatar.com/avatar/' + CryptoJS.MD5($scope.account.email) + '?d=mm';\r\n                }\r\n            };\r\n\r\n        },\r\n        templateUrl: 'navigation/partials/heimdall-navigation.html'\r\n    };\r\n};\r\n","'use strict';\r\n\r\nangular.module('navigation', [])\r\n    .directive('heimdallNavigation', require('./directives/heimdallNavigation'))\r\n\r\n;\r\n\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($scope, projects, account) {\r\n\r\n    $scope.newProject = {};\r\n\r\n    projects.getProjects(account.getUser()).then(function(projects){\r\n        $scope.projects = projects;\r\n    });\r\n\r\n    /**\r\n     * Open the panel for create project\r\n     */\r\n    $scope.newProject = function newProject() {\r\n        $scope.open = true;\r\n    };\r\n\r\n    /**\r\n     * Close the panel for create project\r\n     */\r\n    $scope.closeProject = function closeProject() {\r\n        $scope.open = false;\r\n    };\r\n\r\n    $scope.goBuild = function(build) {\r\n        $state.go('build');\r\n    };\r\n\r\n    /**\r\n     * Create project\r\n     */\r\n    $scope.createProject = function createProject() {\r\n\r\n        if($scope.newProjectForm.$invalid) {\r\n            return;\r\n        }\r\n\r\n        $scope.createLoading = true;\r\n        projects.createProject(account.getUser(), $scope.newProject)\r\n            .then(function() {\r\n                $scope.createLoading = false;\r\n                $scope.open = false;\r\n            }, function() {\r\n                $scope.createLoading = false;\r\n            });\r\n    };\r\n};\r\n","'use strict';\r\n\r\nangular.module('project', [])\r\n    .controller('ProjectController', require('./controllers/ProjectController'))\r\n    .service('projects', require('./services/projects'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('project', {\r\n            url: '/project',\r\n            templateUrl: 'project/partials/project.html',\r\n            controller: 'ProjectController'\r\n        });\r\n    })\r\n;\r\n\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL, account) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'projects/';\r\n    var projects;\r\n\r\n    service.getProjects = function getProjects(user) {\r\n        var deferred = $q.defer();\r\n\r\n        if(!user) {\r\n            user = account.getUser();\r\n        }\r\n\r\n        if(projects) {\r\n            deferred.resolve(projects);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            data: {\r\n                /*jshint camelcase:false*/\r\n                user_id: user.id\r\n            }\r\n        }).then(function(response) {\r\n            projects = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.createProject = function createProject(user, project) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'POST',\r\n            url: url,\r\n            data: {\r\n                /*jshint camelcase:false*/\r\n                admin_id: user.id,\r\n                title: project.title\r\n            }\r\n        }).then(function(response) {\r\n            deferred.resolve(response.data);\r\n            projects.push(response.data);\r\n        }, function() {\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($scope, modal, users) {\r\n\r\n    /**\r\n     * The user has close the modal without any action\r\n     */\r\n    $scope.close = function close() {\r\n        modal.view().deactivate();\r\n    };\r\n\r\n    $scope.confirm = function confirm() {\r\n        users.deleteUser(modal.user).then(function() {\r\n            modal.view().deactivate();\r\n        });\r\n    };\r\n};\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($scope, users, account, modal) {\r\n    $scope.newUser = {};\r\n\r\n    users.getUsers().then(function (users) {\r\n        $scope.users = users;\r\n    });\r\n\r\n    $scope.isCurrentUser = function isCurrentUser(user) {\r\n        if (account.getUser().id === user.id) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    $scope.createUser = function createUser() {\r\n        if ($scope.newUserForm.$invalid) {\r\n            return;\r\n        }\r\n        $scope.createLoading = true;\r\n        users.createUser($scope.newUser)\r\n            .then(function () {\r\n                $scope.createLoading = false;\r\n                $scope.open = false;\r\n            }, function () {\r\n                $scope.createLoading = false;\r\n            });\r\n    };\r\n\r\n    $scope.editUser = function editUser(user) {\r\n        $scope.open = true;\r\n        $scope.newUser = angular.copy(user);\r\n    };\r\n\r\n    $scope.openNewUser = function openNewUser() {\r\n        $scope.open = true;\r\n        // Reset validation\r\n        $scope.newUserForm.$setPristine();\r\n        $scope.newUser = {};\r\n    };\r\n\r\n    $scope.validEditUser = function validEditUser() {\r\n        if ($scope.newUserForm.$invalid) {\r\n            return;\r\n        }\r\n\r\n        $scope.createLoading = true;\r\n        users.updateUser($scope.newUser).then(function (user) {\r\n            $scope.createLoading = false;\r\n            $scope.open = false;\r\n\r\n            // Update the scope\r\n            for (var i = 0; i < $scope.users.length; i++) {\r\n                if($scope.users[i].id === $scope.newUser.id) {\r\n                    $scope.users[i] = user;\r\n                }\r\n            }\r\n        }, function () {\r\n            $scope.createLoading = false;\r\n        });\r\n    };\r\n\r\n    $scope.cancelEditUser = function cancelEditUser() {\r\n        $scope.open = false;\r\n    };\r\n\r\n    $scope.removeUser = function removeUser(user) {\r\n        modal.user = user;\r\n        modal.view({\r\n            controller: 'RemoveUserController',\r\n            templateUrl: 'user/partials/remove-user.html'\r\n        }).activate();\r\n    };\r\n};\r\n","'use strict';\r\n\r\nmodule.exports = function($http, $q, WS_ROOT_URL) {\r\n    var url = WS_ROOT_URL + 'users/';\r\n    var service = {};\r\n    var users;\r\n\r\n    service.getUsers = function getUsers() {\r\n        var deferred = $q.defer();\r\n\r\n        if(users) {\r\n            deferred.resolve(users);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url\r\n        }).then(function(response) {\r\n            users = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n            deferred.reject();\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n\r\n    service.createUser = function createUser(user) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'POST',\r\n            url: url,\r\n            data: user\r\n        }).then(function(response) {\r\n            deferred.resolve(response.data);\r\n            users.push(response.data);\r\n        }, function() {\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.updateUser = function updateUser(user) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'PUT',\r\n            url: url + user.id,\r\n            data: user\r\n        }).then(function(response) {\r\n\r\n            var position = users.indexOf(user);\r\n            users[position] = response.data;\r\n            deferred.resolve(response.data);\r\n\r\n        }, function() {\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n\r\n    service.deleteUser = function deleteUser(user) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'DELETE',\r\n            url: url + user.id\r\n        }).then(function(response) {\r\n\r\n            var position = users.indexOf(user);\r\n            users.splice(position, 1);\r\n            deferred.resolve(response.data);\r\n\r\n        }, function() {\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n","'use strict';\r\n\r\nangular.module('user', [])\r\n    .controller('UserController', require('./controllers/UserController'))\r\n    .controller('RemoveUserController', require('./controllers/RemoveUserController'))\r\n    .service('users', require('./services/users'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('user', {\r\n            url: '/user',\r\n            templateUrl: 'user/partials/user.html',\r\n            controller: 'UserController'\r\n        });\r\n    })\r\n;\r\n\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'versions/';\r\n    var versions = [];\r\n\r\n    /**\r\n     * Get all versions for the project in params\r\n     * @param project\r\n     */\r\n    service.getVersionsByProjects = function getVersionsByProjects(project) {\r\n        var deferred = $q.defer();\r\n\r\n        if(versions[project.id]) {\r\n            deferred.resolve(versions[project.id]);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            params: {\r\n                /*jshint camelcase:false*/\r\n                projectId: project.id\r\n            }\r\n        }).then(function(response) {\r\n            versions[project.id] = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Only in cache memory\r\n     */\r\n    service.getAllVersions = function getAllVersions() {\r\n        var agreVersions = [];\r\n\r\n        for(var i = 0; i<versions.length; i++) {\r\n            agreVersions.push(versions[i]);\r\n        }\r\n        return agreVersions;\r\n    };\r\n\r\n    return service;\r\n};\r\n","'use strict';\r\n\r\nangular.module('version', [])\r\n    .controller('VersionController', require('./controllers/VersionController'))\r\n    .service('versions', require('./services/versions'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('version', {\r\n            url: '/version',\r\n            templateUrl: 'version/partials/version.html',\r\n            controller: 'VersionController'\r\n        });\r\n    })\r\n;\r\n\r\n"],"sourceRoot":"/source/"}