{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","client/src/scripts/core/core.js","app.js","client/src/scripts/app/auth/auth.js","client/src/scripts/app/auth/controllers/auth.controller.js","client/src/scripts/app/auth/services/account.service.js","client/src/scripts/app/auth/services/session.service.js","client/src/scripts/app/build/build.js","client/src/scripts/app/build/controllers/build.controller.js","client/src/scripts/app/build/services/builds.js","client/src/scripts/app/home/controllers/home.controller.js","client/src/scripts/app/home/home.js","client/src/scripts/app/project/controllers/project.controller.js","client/src/scripts/app/project/project.js","client/src/scripts/app/project/services/projects.js","client/src/scripts/app/user/controllers/RemoveUserController.js","client/src/scripts/app/user/controllers/UserController.js","client/src/scripts/app/user/services/users.js","client/src/scripts/app/user/user.js","client/src/scripts/app/version/controllers/VersionController.js","client/src/scripts/app/version/services/versions.js","client/src/scripts/app/version/version.js","client/src/scripts/components/navigation/directives/heimdallNavigation.directive.js","client/src/scripts/components/navigation/navigation.js","client/src/scripts/core/directives/loader.js","client/src/scripts/core/directives/stateClassName.js","client/src/scripts/core/factories/modal.js","client/src/scripts/core/services/loading.service.js"],"names":[],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nrequire('../app/auth/auth');\nrequire('../app/home/home');\nrequire('../app/project/project');\nrequire('../app/version/version');\nrequire('../app/build/build');\nrequire('../app/user/user');\nrequire('../components/navigation/navigation');\n\nangular.module('heimdall', [\n    'ngTouch',\n    'ngSanitize',\n    'ui.router',\n    'pascalprecht.translate',\n    'vButton', 'vModal',\n    'home', 'version', 'build', 'auth', 'project', 'navigation', 'user'])\n    .constant('WS_ROOT_URL', 'http://localhost:3000/api/')\n    .directive('stateClassName', require('./directives/stateClassName'))\n    .directive('loader', require('./directives/loader'))\n    .service('loading', require('./services/loading.service.js'))\n    .factory('modal', require('./factories/modal'))\n    .run(function ($rootScope, $state) {\n        $rootScope.$state = $state;\n    })\n    .config(function ($urlRouterProvider, $translateProvider, $animateProvider) {\n\n        // Remove animation on all ng-if and ng-repeat\n        $animateProvider.classNameFilter(/bi-animate/);\n\n        $urlRouterProvider.otherwise('/auth');\n\n        /**\n         * The provider the the traducer module\n         */\n        $translateProvider.useStaticFilesLoader({\n            prefix: 'i18n/',\n            suffix: '.json'\n        });\n\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.preferredLanguage('fr_FR');\n    })\n;\n\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nrequire('../app/auth/auth');\nrequire('../app/home/home');\nrequire('../app/project/project');\nrequire('../app/version/version');\nrequire('../app/build/build');\nrequire('../app/user/user');\nrequire('../components/navigation/navigation');\n\nangular.module('heimdall', [\n    'ngTouch',\n    'ngSanitize',\n    'ui.router',\n    'pascalprecht.translate',\n    'vButton', 'vModal',\n    'home', 'version', 'build', 'auth', 'project', 'navigation', 'user'])\n    .constant('WS_ROOT_URL', 'http://localhost:3000/api/')\n    .directive('stateClassName', require('./directives/stateClassName'))\n    .directive('loader', require('./directives/loader'))\n    .service('loading', require('./services/loading.service.js'))\n    .factory('modal', require('./factories/modal'))\n    .run(function ($rootScope, $state) {\n        $rootScope.$state = $state;\n    })\n    .config(function ($urlRouterProvider, $translateProvider, $animateProvider) {\n\n        // Remove animation on all ng-if and ng-repeat\n        $animateProvider.classNameFilter(/bi-animate/);\n\n        $urlRouterProvider.otherwise('/auth');\n\n        /**\n         * The provider the the traducer module\n         */\n        $translateProvider.useStaticFilesLoader({\n            prefix: 'i18n/',\n            suffix: '.json'\n        });\n\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.preferredLanguage('fr_FR');\n    })\n;\n\n\n},{\"../app/auth/auth\":2,\"../app/build/build\":6,\"../app/home/home\":10,\"../app/project/project\":12,\"../app/user/user\":17,\"../app/version/version\":20,\"../components/navigation/navigation\":22,\"./directives/loader\":23,\"./directives/stateClassName\":24,\"./factories/modal\":25,\"./services/loading.service.js\":26}],2:[function(require,module,exports){\n'use strict';\n\nangular.module('auth', [])\n    .controller('AuthController', require('./controllers/auth.controller.js'))\n    .service('account', require('./services/account.service.js'))\n    .service('session', require('./services/session.service.js'))\n    .run(function(session) {\n        session.init();\n    })\n    .config(function ($stateProvider) {\n        $stateProvider.state('auth', {\n            url: '/auth',\n            templateUrl: 'app/auth/partials/auth.html',\n            controller: 'AuthController',\n            controllerAs: 'authCtrl'\n        });\n    })\n;\n\n\n},{\"./controllers/auth.controller.js\":3,\"./services/account.service.js\":4,\"./services/session.service.js\":5}],3:[function(require,module,exports){\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function($scope, $state, account) {\n    var self = this;\n\n    $scope.user = {\n        //email: 'admin@peashooter.com',\n        //password: 'admin'\n    };\n\n\n    self.submit = function submit() {\n        // Check if the form is valid\n        if($scope.authForm.$invalid) {\n            return;\n        }\n        self.logInProgress = true;\n        account.authUser($scope.user.email, $scope.user.password)\n            .then(function() {\n                $state.go('home');\n                self.logInProgress = false;\n            }, function() {\n                // Error case\n                self.logInProgress = false;\n            });\n\n    };\n\n    return self;\n};\n\n},{}],4:[function(require,module,exports){\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($http, $q, WS_ROOT_URL) {\n    var service = {};\n    var urlAuh = WS_ROOT_URL + 'users/auth/';\n    var user;\n\n    // Get the user if exist in localstorage\n    if(localStorage.getItem('user')) {\n        user = JSON.parse(localStorage.getItem('user'));\n    }\n\n    /**\n     * Get the current user logged on the platform\n     * @returns {{name: string, firstname: string, email: string}}\n     */\n    service.getUser = function getUser() {\n        return user;\n    };\n\n    /**\n     * Check if the user email and password are correct combination\n     * @param email\n     * @param password\n     */\n    service.authUser = function authUser(email, password) {\n        var deferred = $q.defer();\n        $http({\n            method: 'POST',\n            url: urlAuh,\n            data: {\n                email: email,\n                password: password\n            }\n        }).then(function(response) {\n            service.saveLocalStorage(response.data);\n            deferred.resolve(response.data);\n        }, function() {\n            deferred.reject();\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Save the user in params into the localStorage\n     * @param userToSave\n     */\n    service.saveLocalStorage = function saveLocalStorage(userToSave) {\n        delete userToSave.password;\n        user = userToSave;\n        localStorage.setItem('user', JSON.stringify(userToSave));\n    };\n\n    /**\n     * Destroy the user in the service AND in the localStorage\n     */\n    service.logout = function logout() {\n        localStorage.removeItem('user');\n        user = undefined;\n    };\n\n    return service;\n};\n\n},{}],5:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($rootScope, $state, account) {\r\n    var service = {};\r\n\r\n    /**\r\n     * Init the session service\r\n     * This service listen all the change state, and check if the user has a current session\r\n     * If the user has not session, he will be redirected to the auth state\r\n     */\r\n    service.init = function init() {\r\n        service.checkAndRedirect($state.current.name);\r\n        $rootScope.$on('$stateChangeStart', function (event, toState) {\r\n            service.checkAndRedirect(toState.name);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Check the session and redirect the user to the auth\r\n     * @param stateName\r\n     */\r\n    service.checkAndRedirect = function checkAndRedirect(stateName) {\r\n        // Check if a user exist in the session\r\n        if(!account.getUser() && stateName !== 'auth') {\r\n            // If not we send the user on the auth page\r\n            $state.go('auth');\r\n        }\r\n    };\r\n\r\n    return service;\r\n};\r\n\n},{}],6:[function(require,module,exports){\n'use strict';\n\nangular.module('build', [])\n    .controller('BuildController', require('./controllers/build.controller.js'))\n    .service('builds', require('./services/builds'))\n    .config(function ($stateProvider) {\n        $stateProvider.state('build', {\n            url: '/build/:buildId',\n            templateUrl: 'app/build/partials/build.html',\n            controller: 'BuildController',\n            controllerAs: 'buildCtrl',\n            resolve: {\n                build: function ($stateParams, builds) {\n                    return builds.getBuildById($stateParams.buildId);\n                }\n            }\n        });\n    })\n;\n\n\n},{\"./controllers/build.controller.js\":7,\"./services/builds\":8}],7:[function(require,module,exports){\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function(build) {\n    this.build = build;\n\n    /**\n     * Open the panel for create project\n     */\n    this.newBuild = function newBuild() {\n        this.open = true;\n    };\n\n    /**\n     * Close the panel for create project\n     */\n    this.closeBuild = function closeBuild() {\n        this.open = false;\n    };\n\n    return this;\n};\n\n},{}],8:[function(require,module,exports){\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($http, $q, WS_ROOT_URL) {\n    var service = {};\n    var url = WS_ROOT_URL + 'builds/';\n    var builds = [];\n\n    /**\n     * Get all builds for the project in params\n     * @param project\n     */\n    service.getBuildsByProject = function getBuildsByProject(project) {\n        var deferred = $q.defer();\n\n        if (builds[project.id]) {\n            deferred.resolve(builds[project.id]);\n            return deferred.promise;\n        }\n\n        $http({\n            method: 'GET',\n            url: url,\n            params: {\n                projectId: project.id\n            }\n        }).then(function (response) {\n            builds[project.id] = response.data;\n            deferred.resolve(response.data);\n        }, function () {\n\n        });\n\n        return deferred.promise;\n    };\n\n    service.getBuildById = function getBuildById(buildId) {\n        var deferred = $q.defer();\n\n        // Search in cache\n        var cachedBuild = service.getBuildByIdInCache(buildId);\n\n        if (cachedBuild) {\n            console.log(cachedBuild);\n            deferred.resolve(cachedBuild);\n            return deferred.promise;\n        }\n\n        // Otherwise we call the API\n        $http({\n            method: 'GET',\n            url: url + buildId\n        }).then(function (response) {\n            deferred.resolve(response.data);\n        }, function () {\n\n        });\n\n        return deferred.promise;\n    };\n\n    service.getBuildByIdInCache = function getBuildByIdInCache(buildId) {\n        var builds = service.getAllBuilds();\n        for(var i = 0; i<builds.length; i++) {\n            if(builds[i].id === buildId) {\n                return builds[i];\n            }\n        }\n    };\n\n    /**\n     * Only in cache memory\n     */\n    service.getAllBuilds = function getAllBuilds() {\n        var agreBuilds = [];\n        for (var i = 0; i < builds.length; i++) {\n            agreBuilds.push(builds[i]);\n        }\n        return agreBuilds;\n    };\n\n    service.createBuild = function createBuild(build, project) {\n        var deferred = $q.defer();\n\n        build.projectId = project.id;\n\n        $http({\n            method: 'POST',\n            url: url,\n            data: build\n        }).then(function (response) {\n            deferred.resolve(response.data);\n            builds.push(response.data);\n        }, function () {\n        });\n\n        return deferred.promise;\n    };\n\n    return service;\n};\n\n},{}],9:[function(require,module,exports){\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function(projects, versions, builds) {\n    var self = this;\n    // Get count project\n    projects.getProjects().then(function(projects) {\n        console.log('here');\n        self.countProject = projects.length;\n        if(self.countProject) {\n            self.countVersion = versions.getAllVersions().length / self.countProject * 100 / 100;\n            self.countBuild = builds.getAllBuilds().length / self.countProject;\n        } else {\n            self.countVersion = 0;\n            self.countBuild = 0;\n        }\n    });\n\n    return self;\n};\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nangular.module('home', [])\n    .controller('HomeController', require('./controllers/home.controller.js'))\n    .config(function ($stateProvider) {\n        $stateProvider.state('home', {\n            url: '/home',\n            templateUrl: 'app/home/partials/home.html',\n            controller: 'HomeController',\n            controllerAs: 'homeCtrl',\n            data: {pageTitle: 'Home'}\n        });\n    })\n;\n\n\n},{\"./controllers/home.controller.js\":9}],11:[function(require,module,exports){\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function($state, projects, account, builds) {\n    var self = this;\n\n    self.newProject = {};\n\n    projects.getProjects(account.getUser()).then(function(projects){\n        self.projects = projects;\n    });\n\n    self.getBuildsByProject = function getBuildsByProject(project) {\n        builds.getBuildsByProject(project).then(function(builds) {\n            project.builds = builds;\n        });\n    };\n\n    /**\n     * Open the panel for create project\n     */\n    self.newProject = function newProject() {\n        self.open = true;\n    };\n\n    /**\n     * Close the panel for create project\n     */\n    self.closeProject = function closeProject() {\n        self.open = false;\n    };\n\n    self.goBuild = function(build) {\n        $state.go('build', {\n            buildId: build.id\n        });\n    };\n\n    /**\n     * Create project\n     */\n    self.createProject = function createProject() {\n\n        if(self.newProjectForm.$invalid) {\n            return;\n        }\n\n        self.createLoading = true;\n        projects.createProject(self.newProject, account.getUser())\n            .then(function(project) {\n\n                // Build the build object to save\n                var build = {\n                    name: 'Default',\n                    config: ''\n                };\n                builds.createBuild(build, project).then(function() {\n                    self.createLoading = false;\n                    self.open = false;\n\n                }, function() {\n                    self.createLoading = false;\n                });\n            }, function() {\n                self.createLoading = false;\n            });\n    };\n\n    return self;\n};\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\nangular.module('project', [])\n    .controller('ProjectController', require('./controllers/project.controller.js'))\n    .service('projects', require('./services/projects'))\n    .config(function ($stateProvider) {\n        $stateProvider.state('project', {\n            url: '/project',\n            templateUrl: 'app/project/partials/project.html',\n            controller: 'ProjectController',\n            controllerAs: 'projectCtrl'\n        });\n    })\n;\n\n\n},{\"./controllers/project.controller.js\":11,\"./services/projects\":13}],13:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL, account) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'projects/';\r\n    var projects;\r\n\r\n    service.getProjects = function getProjects(user) {\r\n        var deferred = $q.defer();\r\n\r\n        if(!user) {\r\n            user = account.getUser();\r\n        }\r\n\r\n        if(projects) {\r\n            deferred.resolve(projects);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            data: {\r\n                /*jshint camelcase:false*/\r\n                user_id: user.id\r\n            }\r\n        }).then(function(response) {\r\n            projects = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.createProject = function createProject(project, user) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'POST',\r\n            url: url,\r\n            data: {\r\n                /*jshint camelcase:false*/\r\n                admin_id: user.id,\r\n                title: project.title\r\n            }\r\n        }).then(function(response) {\r\n\r\n            projects.push(response.data);\r\n            deferred.resolve(response.data);\r\n\r\n        }, function() {\r\n            deferred.reject();\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function($scope, modal, users) {\n\n    /**\n     * The user has close the modal without any action\n     */\n    $scope.close = function close() {\n        modal.view().deactivate();\n    };\n\n    $scope.confirm = function confirm() {\n        users.deleteUser(modal.user).then(function() {\n            modal.view().deactivate();\n        });\n    };\n};\n\n},{}],15:[function(require,module,exports){\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($scope, users, account, modal) {\n    $scope.newUser = {};\n\n    users.getUsers().then(function (users) {\n        $scope.users = users;\n    });\n\n    $scope.isCurrentUser = function isCurrentUser(user) {\n        if (account.getUser().id === user.id) {\n            return true;\n        }\n        return false;\n    };\n\n    $scope.createUser = function createUser() {\n        if ($scope.newUserForm.$invalid) {\n            return;\n        }\n        $scope.createLoading = true;\n        users.createUser($scope.newUser)\n            .then(function () {\n                $scope.createLoading = false;\n                $scope.open = false;\n            }, function () {\n                $scope.createLoading = false;\n            });\n    };\n\n    $scope.editUser = function editUser(user) {\n        $scope.open = true;\n        $scope.newUser = angular.copy(user);\n    };\n\n    $scope.openNewUser = function openNewUser() {\n        $scope.open = true;\n        // Reset validation\n        $scope.newUserForm.$setPristine();\n        $scope.newUser = {};\n    };\n\n    $scope.validEditUser = function validEditUser() {\n        if ($scope.newUserForm.$invalid) {\n            return;\n        }\n\n        $scope.createLoading = true;\n        users.updateUser($scope.newUser).then(function (user) {\n            $scope.createLoading = false;\n            $scope.open = false;\n\n            // Update the scope\n            for (var i = 0; i < $scope.users.length; i++) {\n                if($scope.users[i].id === $scope.newUser.id) {\n                    $scope.users[i] = user;\n                }\n            }\n        }, function () {\n            $scope.createLoading = false;\n        });\n    };\n\n    $scope.cancelEditUser = function cancelEditUser() {\n        $scope.open = false;\n    };\n\n    $scope.removeUser = function removeUser(user) {\n        modal.user = user;\n        modal.view({\n            controller: 'RemoveUserController',\n            templateUrl: '../partials/remove-user.html'\n        }).activate();\n    };\n};\n\n},{}],16:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function($http, $q, WS_ROOT_URL) {\n    var url = WS_ROOT_URL + 'users/';\n    var service = {};\n    var users;\n\n    service.getUsers = function getUsers() {\n        var deferred = $q.defer();\n\n        if(users) {\n            deferred.resolve(users);\n            return deferred.promise;\n        }\n\n        $http({\n            method: 'GET',\n            url: url\n        }).then(function(response) {\n            users = response.data;\n            deferred.resolve(response.data);\n        }, function() {\n            deferred.reject();\n        });\n\n        return deferred.promise;\n    };\n\n\n    service.createUser = function createUser(user) {\n        var deferred = $q.defer();\n\n        $http({\n            method: 'POST',\n            url: url,\n            data: user\n        }).then(function(response) {\n            deferred.resolve(response.data);\n            users.push(response.data);\n        }, function() {\n        });\n\n        return deferred.promise;\n    };\n\n    service.updateUser = function updateUser(user) {\n        var deferred = $q.defer();\n\n        $http({\n            method: 'PUT',\n            url: url + user.id,\n            data: user\n        }).then(function(response) {\n\n            var position = users.indexOf(user);\n            users[position] = response.data;\n            deferred.resolve(response.data);\n\n        }, function() {\n        });\n\n        return deferred.promise;\n    };\n\n\n    service.deleteUser = function deleteUser(user) {\n        var deferred = $q.defer();\n\n        $http({\n            method: 'DELETE',\n            url: url + user.id\n        }).then(function(response) {\n\n            var position = users.indexOf(user);\n            users.splice(position, 1);\n            deferred.resolve(response.data);\n\n        }, function() {\n        });\n\n        return deferred.promise;\n    };\n\n    return service;\n};\n\n},{}],17:[function(require,module,exports){\n'use strict';\n\nangular.module('user', [])\n    .controller('UserController', require('./controllers/UserController'))\n    .controller('RemoveUserController', require('./controllers/RemoveUserController'))\n    .service('users', require('./services/users'))\n    .config(function ($stateProvider) {\n        $stateProvider.state('user', {\n            url: '/user',\n            templateUrl: 'app/user/partials/user.html',\n            controller: 'UserController'\n        });\n    })\n;\n\n\n},{\"./controllers/RemoveUserController\":14,\"./controllers/UserController\":15,\"./services/users\":16}],18:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function() {\r\n\r\n};\r\n\n},{}],19:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'versions/';\r\n    var versions = [];\r\n\r\n    /**\r\n     * Get all versions for the project in params\r\n     * @param project\r\n     */\r\n    service.getVersionsByProjects = function getVersionsByProjects(project) {\r\n        var deferred = $q.defer();\r\n\r\n        if(versions[project.id]) {\r\n            deferred.resolve(versions[project.id]);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            params: {\r\n                /*jshint camelcase:false*/\r\n                projectId: project.id\r\n            }\r\n        }).then(function(response) {\r\n            versions[project.id] = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Only in cache memory\r\n     */\r\n    service.getAllVersions = function getAllVersions() {\r\n        var agreVersions = [];\r\n\r\n        for(var i = 0; i<versions.length; i++) {\r\n            agreVersions.push(versions[i]);\r\n        }\r\n        return agreVersions;\r\n    };\r\n\r\n    return service;\r\n};\r\n\n},{}],20:[function(require,module,exports){\n'use strict';\r\n\r\nangular.module('version', [])\r\n    .controller('VersionController', require('./controllers/VersionController'))\r\n    .service('versions', require('./services/versions'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('version', {\r\n            url: '/version',\r\n            templateUrl: 'app/version/partials/version.html',\r\n            controller: 'VersionController'\r\n        });\r\n    })\r\n;\r\n\r\n\n},{\"./controllers/VersionController\":18,\"./services/versions\":19}],21:[function(require,module,exports){\n'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function (account) {\r\n    return {\r\n        replace: true,\r\n        controllerAs: 'NavigationController',\r\n        controller: function($scope, $state){\r\n\r\n            /**\r\n             * Test if the menu navigation must be displayed on this state\r\n             * @returns {boolean}\r\n             */\r\n            $scope.navigationActive = function navigationActive() {\r\n                return !$state.is('auth');\r\n            };\r\n\r\n            /**\r\n             * Logout the user, destroy the session and redirect to the auth page\r\n             */\r\n            $scope.logout = function logout() {\r\n                account.logout();\r\n                $state.go('auth');\r\n            };\r\n\r\n            /**\r\n             * Check if the item in the menu is linked to a state\r\n             * @param item\r\n             * @returns {boolean}\r\n             */\r\n            $scope.itemIsSelected = function itemIsSelected(item) {\r\n                return $state.current.name.indexOf(item) >= 0;\r\n            };\r\n\r\n            /**\r\n             * When the menu appear\r\n             */\r\n            $scope.appear = function appear() {\r\n                var user = account.getUser();\r\n                $scope.account = user;\r\n            };\r\n\r\n            /**\r\n             * Get the avatar from gravatar\r\n             * @returns {string}\r\n             */\r\n            $scope.getAvatar = function getAvatar() {\r\n                if($scope.account) {\r\n                    return 'https://secure.gravatar.com/avatar/' + CryptoJS.MD5($scope.account.email) + '?d=mm';\r\n                }\r\n            };\r\n\r\n        },\r\n        templateUrl: 'components/navigation/partials/heimdall-navigation.html'\r\n    };\r\n};\r\n\n},{}],22:[function(require,module,exports){\n'use strict';\n\nangular.module('navigation', [])\n    .directive('heimdallNavigation', require('./directives/heimdallNavigation.directive.js'))\n\n;\n\n\n},{\"./directives/heimdallNavigation.directive.js\":21}],23:[function(require,module,exports){\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($state, loading) {\n    return {\n        restrict: 'E',\n        replace: true,\n        link: function (scope) {\n            function testIfSecure(stateName) {\n                if (stateName !== 'auth' && stateName) {\n                    scope.display = true;\n                    loading.init()\n                        .then(function() {\n                            scope.display = false;\n                        });\n                } else {\n                    scope.display = false;\n                }\n            }\n            testIfSecure($state.current.name);\n\n            /**\n             * Listen when we change to another state\n             * So add a className based on the current path\n             */\n            scope.$on('$stateChangeStart', function (e, toState) {\n                testIfSecure(toState.name);\n            });\n        },\n        templateUrl: '../partials/loader.html'\n    };\n};\n\n},{}],24:[function(require,module,exports){\n/**\n * stateClassName directive\n * Bind a custom class based on the current state\n */\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($state) {\n    /**\n     * Construct a className based on a state and a custom prefix\n     * The default one is page-, customize it by adding a value to the directive\n     * @param  {String} path   State name\n     * @param  {String} prefix Custom prefix\n     * @return {String}        ClassName\n     */\n    function className(path, prefix) {\n        path = path || 'root';\n        prefix = prefix || 'page-';\n        return prefix + path.replace(/\\./g, '-').toLowerCase();\n    }\n\n    return {\n        restrict: 'A',\n        scope:true,\n        link: function (scope, el, attr) {\n\n            el.addClass(className($state.current.name, attr.stateClassName));\n\n            /**\n             * Listen when we change to another state\n             * So add a className based on the current path\n             */\n            scope.$on('$stateChangeStart', function (e, toState, current, previousState) {\n\n                el.removeClass('page-root');\n                if(previousState) {\n                    el.removeClass(className(previousState.name, attr.stateClassName));\n                }\n                el.addClass(className(toState.name, attr.stateClassName));\n\n            });\n        }\n    };\n};\n\n},{}],25:[function(require,module,exports){\n'use strict';\n/*@ngInject*/\nmodule.exports = function (vModal) {\n    var service = {};\n    service.model = {};\n\n    /**\n     * Init the view for the modal\n     * @param params\n     * @returns {*}\n     */\n    service.view = function(params) {\n\n        if(params) {\n            service.instance = vModal(params);\n        }\n        if(!service.instance){\n            console.log('This modal was not instanciated yet');\n        }\n        return service.instance;\n    };\n\n    return service;\n};\n\n},{}],26:[function(require,module,exports){\n'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($q, account, projects, versions, builds, users) {\r\n    var service = {};\r\n\r\n    /**\r\n     * Load all the data\r\n     * @returns {Promise}\r\n     */\r\n    service.init = function init() {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        var projectsLoaded = false;\r\n        var usersLoaded = false;\r\n\r\n        service.loadProject().then(function () {\r\n            projectsLoaded = true;\r\n            if(usersLoaded) {\r\n                deferred.resolve();\r\n            }\r\n        });\r\n\r\n        service.loadUsers().then(function() {\r\n            usersLoaded = true;\r\n            if(projectsLoaded) {\r\n                deferred.resolve();\r\n            }\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadProject = function loadProject() {\r\n        var deferred = $q.defer();\r\n        var versionsOk = false;\r\n        var buildsOk = false;\r\n\r\n        projects.getProjects(account.getUser())\r\n            .then(function (projects) {\r\n                if (projects.length === 0) {\r\n                    console.log('Projects are Loaded (empty)');\r\n                    deferred.resolve();\r\n                }\r\n\r\n                service.loadVersions(projects).then(function() {\r\n                    versionsOk = true;\r\n                    if(buildsOk) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n\r\n                service.loadBuilds(projects).then(function() {\r\n                    buildsOk = true;\r\n                    if(versionsOk) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n            });\r\n        return deferred.promise;\r\n    };\r\n\r\n    /* jshint ignore:start */\r\n    service.loadBuilds = function loadBuilds(projects) {\r\n        var deferred = $q.defer();\r\n\r\n        var projectCpt = 0;\r\n        for (var i = 0; i < projects.length; i++) {\r\n\r\n            builds.getBuildsByProject(projects[i])\r\n                .then(function () {\r\n                    projectCpt++;\r\n                    if (projectCpt >= projects.length) {\r\n                        console.log('Builds are loaded');\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n        }\r\n\r\n        return deferred.promise;\r\n    };\r\n    /* jshint ignore:end */\r\n\r\n    /* jshint ignore:start */\r\n    service.loadVersions = function loadVersions(projects) {\r\n        var deferred = $q.defer();\r\n\r\n        var projectCpt = 0;\r\n        for (var i = 0; i < projects.length; i++) {\r\n            versions.getVersionsByProjects(projects[i])\r\n                .then(function () {\r\n                    projectCpt++;\r\n                    if (projectCpt >= projects.length) {\r\n                        console.log('Versions are loaded');\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n\r\n        }\r\n        return deferred.promise;\r\n    };\r\n    /* jshint ignore:end */\r\n\r\n    service.loadUsers = function loadUsers() {\r\n        var deferred = $q.defer();\r\n        users.getUsers().then(function(){\r\n            console.log('Users are loaded');\r\n            deferred.resolve();\r\n        });\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n\r\n\n},{}]},{},[1])\n\n","'use strict';\n\nangular.module('auth', [])\n    .controller('AuthController', require('./controllers/auth.controller.js'))\n    .service('account', require('./services/account.service.js'))\n    .service('session', require('./services/session.service.js'))\n    .run(function(session) {\n        session.init();\n    })\n    .config(function ($stateProvider) {\n        $stateProvider.state('auth', {\n            url: '/auth',\n            templateUrl: 'app/auth/partials/auth.html',\n            controller: 'AuthController',\n            controllerAs: 'authCtrl'\n        });\n    })\n;\n\n","'use strict';\n\n/*@ngInject*/\nmodule.exports = function($scope, $state, account) {\n    var self = this;\n\n    $scope.user = {\n        //email: 'admin@peashooter.com',\n        //password: 'admin'\n    };\n\n\n    self.submit = function submit() {\n        // Check if the form is valid\n        if($scope.authForm.$invalid) {\n            return;\n        }\n        self.logInProgress = true;\n        account.authUser($scope.user.email, $scope.user.password)\n            .then(function() {\n                $state.go('home');\n                self.logInProgress = false;\n            }, function() {\n                // Error case\n                self.logInProgress = false;\n            });\n\n    };\n\n    return self;\n};\n","'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($http, $q, WS_ROOT_URL) {\n    var service = {};\n    var urlAuh = WS_ROOT_URL + 'users/auth/';\n    var user;\n\n    // Get the user if exist in localstorage\n    if(localStorage.getItem('user')) {\n        user = JSON.parse(localStorage.getItem('user'));\n    }\n\n    /**\n     * Get the current user logged on the platform\n     * @returns {{name: string, firstname: string, email: string}}\n     */\n    service.getUser = function getUser() {\n        return user;\n    };\n\n    /**\n     * Check if the user email and password are correct combination\n     * @param email\n     * @param password\n     */\n    service.authUser = function authUser(email, password) {\n        var deferred = $q.defer();\n        $http({\n            method: 'POST',\n            url: urlAuh,\n            data: {\n                email: email,\n                password: password\n            }\n        }).then(function(response) {\n            service.saveLocalStorage(response.data);\n            deferred.resolve(response.data);\n        }, function() {\n            deferred.reject();\n        });\n\n        return deferred.promise;\n    };\n\n    /**\n     * Save the user in params into the localStorage\n     * @param userToSave\n     */\n    service.saveLocalStorage = function saveLocalStorage(userToSave) {\n        delete userToSave.password;\n        user = userToSave;\n        localStorage.setItem('user', JSON.stringify(userToSave));\n    };\n\n    /**\n     * Destroy the user in the service AND in the localStorage\n     */\n    service.logout = function logout() {\n        localStorage.removeItem('user');\n        user = undefined;\n    };\n\n    return service;\n};\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($rootScope, $state, account) {\r\n    var service = {};\r\n\r\n    /**\r\n     * Init the session service\r\n     * This service listen all the change state, and check if the user has a current session\r\n     * If the user has not session, he will be redirected to the auth state\r\n     */\r\n    service.init = function init() {\r\n        service.checkAndRedirect($state.current.name);\r\n        $rootScope.$on('$stateChangeStart', function (event, toState) {\r\n            service.checkAndRedirect(toState.name);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Check the session and redirect the user to the auth\r\n     * @param stateName\r\n     */\r\n    service.checkAndRedirect = function checkAndRedirect(stateName) {\r\n        // Check if a user exist in the session\r\n        if(!account.getUser() && stateName !== 'auth') {\r\n            // If not we send the user on the auth page\r\n            $state.go('auth');\r\n        }\r\n    };\r\n\r\n    return service;\r\n};\r\n","'use strict';\n\nangular.module('build', [])\n    .controller('BuildController', require('./controllers/build.controller.js'))\n    .service('builds', require('./services/builds'))\n    .config(function ($stateProvider) {\n        $stateProvider.state('build', {\n            url: '/build/:buildId',\n            templateUrl: 'app/build/partials/build.html',\n            controller: 'BuildController',\n            controllerAs: 'buildCtrl',\n            resolve: {\n                build: function ($stateParams, builds) {\n                    return builds.getBuildById($stateParams.buildId);\n                }\n            }\n        });\n    })\n;\n\n","'use strict';\n\n/*@ngInject*/\nmodule.exports = function(build) {\n    this.build = build;\n\n    /**\n     * Open the panel for create project\n     */\n    this.newBuild = function newBuild() {\n        this.open = true;\n    };\n\n    /**\n     * Close the panel for create project\n     */\n    this.closeBuild = function closeBuild() {\n        this.open = false;\n    };\n\n    return this;\n};\n","'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($http, $q, WS_ROOT_URL) {\n    var service = {};\n    var url = WS_ROOT_URL + 'builds/';\n    var builds = [];\n\n    /**\n     * Get all builds for the project in params\n     * @param project\n     */\n    service.getBuildsByProject = function getBuildsByProject(project) {\n        var deferred = $q.defer();\n\n        if (builds[project.id]) {\n            deferred.resolve(builds[project.id]);\n            return deferred.promise;\n        }\n\n        $http({\n            method: 'GET',\n            url: url,\n            params: {\n                projectId: project.id\n            }\n        }).then(function (response) {\n            builds[project.id] = response.data;\n            deferred.resolve(response.data);\n        }, function () {\n\n        });\n\n        return deferred.promise;\n    };\n\n    service.getBuildById = function getBuildById(buildId) {\n        var deferred = $q.defer();\n\n        // Search in cache\n        var cachedBuild = service.getBuildByIdInCache(buildId);\n\n        if (cachedBuild) {\n            console.log(cachedBuild);\n            deferred.resolve(cachedBuild);\n            return deferred.promise;\n        }\n\n        // Otherwise we call the API\n        $http({\n            method: 'GET',\n            url: url + buildId\n        }).then(function (response) {\n            deferred.resolve(response.data);\n        }, function () {\n\n        });\n\n        return deferred.promise;\n    };\n\n    service.getBuildByIdInCache = function getBuildByIdInCache(buildId) {\n        var builds = service.getAllBuilds();\n        for(var i = 0; i<builds.length; i++) {\n            if(builds[i].id === buildId) {\n                return builds[i];\n            }\n        }\n    };\n\n    /**\n     * Only in cache memory\n     */\n    service.getAllBuilds = function getAllBuilds() {\n        var agreBuilds = [];\n        for (var i = 0; i < builds.length; i++) {\n            agreBuilds.push(builds[i]);\n        }\n        return agreBuilds;\n    };\n\n    service.createBuild = function createBuild(build, project) {\n        var deferred = $q.defer();\n\n        build.projectId = project.id;\n\n        $http({\n            method: 'POST',\n            url: url,\n            data: build\n        }).then(function (response) {\n            deferred.resolve(response.data);\n            builds.push(response.data);\n        }, function () {\n        });\n\n        return deferred.promise;\n    };\n\n    return service;\n};\n","'use strict';\n\n/*@ngInject*/\nmodule.exports = function(projects, versions, builds) {\n    var self = this;\n    // Get count project\n    projects.getProjects().then(function(projects) {\n        console.log('here');\n        self.countProject = projects.length;\n        if(self.countProject) {\n            self.countVersion = versions.getAllVersions().length / self.countProject * 100 / 100;\n            self.countBuild = builds.getAllBuilds().length / self.countProject;\n        } else {\n            self.countVersion = 0;\n            self.countBuild = 0;\n        }\n    });\n\n    return self;\n};\n","'use strict';\n\nangular.module('home', [])\n    .controller('HomeController', require('./controllers/home.controller.js'))\n    .config(function ($stateProvider) {\n        $stateProvider.state('home', {\n            url: '/home',\n            templateUrl: 'app/home/partials/home.html',\n            controller: 'HomeController',\n            controllerAs: 'homeCtrl',\n            data: {pageTitle: 'Home'}\n        });\n    })\n;\n\n","'use strict';\n\n/*@ngInject*/\nmodule.exports = function($state, projects, account, builds) {\n    var self = this;\n\n    self.newProject = {};\n\n    projects.getProjects(account.getUser()).then(function(projects){\n        self.projects = projects;\n    });\n\n    self.getBuildsByProject = function getBuildsByProject(project) {\n        builds.getBuildsByProject(project).then(function(builds) {\n            project.builds = builds;\n        });\n    };\n\n    /**\n     * Open the panel for create project\n     */\n    self.newProject = function newProject() {\n        self.open = true;\n    };\n\n    /**\n     * Close the panel for create project\n     */\n    self.closeProject = function closeProject() {\n        self.open = false;\n    };\n\n    self.goBuild = function(build) {\n        $state.go('build', {\n            buildId: build.id\n        });\n    };\n\n    /**\n     * Create project\n     */\n    self.createProject = function createProject() {\n\n        if(self.newProjectForm.$invalid) {\n            return;\n        }\n\n        self.createLoading = true;\n        projects.createProject(self.newProject, account.getUser())\n            .then(function(project) {\n\n                // Build the build object to save\n                var build = {\n                    name: 'Default',\n                    config: ''\n                };\n                builds.createBuild(build, project).then(function() {\n                    self.createLoading = false;\n                    self.open = false;\n\n                }, function() {\n                    self.createLoading = false;\n                });\n            }, function() {\n                self.createLoading = false;\n            });\n    };\n\n    return self;\n};\n","'use strict';\n\nangular.module('project', [])\n    .controller('ProjectController', require('./controllers/project.controller.js'))\n    .service('projects', require('./services/projects'))\n    .config(function ($stateProvider) {\n        $stateProvider.state('project', {\n            url: '/project',\n            templateUrl: 'app/project/partials/project.html',\n            controller: 'ProjectController',\n            controllerAs: 'projectCtrl'\n        });\n    })\n;\n\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL, account) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'projects/';\r\n    var projects;\r\n\r\n    service.getProjects = function getProjects(user) {\r\n        var deferred = $q.defer();\r\n\r\n        if(!user) {\r\n            user = account.getUser();\r\n        }\r\n\r\n        if(projects) {\r\n            deferred.resolve(projects);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            data: {\r\n                /*jshint camelcase:false*/\r\n                user_id: user.id\r\n            }\r\n        }).then(function(response) {\r\n            projects = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.createProject = function createProject(project, user) {\r\n        var deferred = $q.defer();\r\n\r\n        $http({\r\n            method: 'POST',\r\n            url: url,\r\n            data: {\r\n                /*jshint camelcase:false*/\r\n                admin_id: user.id,\r\n                title: project.title\r\n            }\r\n        }).then(function(response) {\r\n\r\n            projects.push(response.data);\r\n            deferred.resolve(response.data);\r\n\r\n        }, function() {\r\n            deferred.reject();\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n","'use strict';\n\n/*@ngInject*/\nmodule.exports = function($scope, modal, users) {\n\n    /**\n     * The user has close the modal without any action\n     */\n    $scope.close = function close() {\n        modal.view().deactivate();\n    };\n\n    $scope.confirm = function confirm() {\n        users.deleteUser(modal.user).then(function() {\n            modal.view().deactivate();\n        });\n    };\n};\n","'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($scope, users, account, modal) {\n    $scope.newUser = {};\n\n    users.getUsers().then(function (users) {\n        $scope.users = users;\n    });\n\n    $scope.isCurrentUser = function isCurrentUser(user) {\n        if (account.getUser().id === user.id) {\n            return true;\n        }\n        return false;\n    };\n\n    $scope.createUser = function createUser() {\n        if ($scope.newUserForm.$invalid) {\n            return;\n        }\n        $scope.createLoading = true;\n        users.createUser($scope.newUser)\n            .then(function () {\n                $scope.createLoading = false;\n                $scope.open = false;\n            }, function () {\n                $scope.createLoading = false;\n            });\n    };\n\n    $scope.editUser = function editUser(user) {\n        $scope.open = true;\n        $scope.newUser = angular.copy(user);\n    };\n\n    $scope.openNewUser = function openNewUser() {\n        $scope.open = true;\n        // Reset validation\n        $scope.newUserForm.$setPristine();\n        $scope.newUser = {};\n    };\n\n    $scope.validEditUser = function validEditUser() {\n        if ($scope.newUserForm.$invalid) {\n            return;\n        }\n\n        $scope.createLoading = true;\n        users.updateUser($scope.newUser).then(function (user) {\n            $scope.createLoading = false;\n            $scope.open = false;\n\n            // Update the scope\n            for (var i = 0; i < $scope.users.length; i++) {\n                if($scope.users[i].id === $scope.newUser.id) {\n                    $scope.users[i] = user;\n                }\n            }\n        }, function () {\n            $scope.createLoading = false;\n        });\n    };\n\n    $scope.cancelEditUser = function cancelEditUser() {\n        $scope.open = false;\n    };\n\n    $scope.removeUser = function removeUser(user) {\n        modal.user = user;\n        modal.view({\n            controller: 'RemoveUserController',\n            templateUrl: '../partials/remove-user.html'\n        }).activate();\n    };\n};\n","'use strict';\n\nmodule.exports = function($http, $q, WS_ROOT_URL) {\n    var url = WS_ROOT_URL + 'users/';\n    var service = {};\n    var users;\n\n    service.getUsers = function getUsers() {\n        var deferred = $q.defer();\n\n        if(users) {\n            deferred.resolve(users);\n            return deferred.promise;\n        }\n\n        $http({\n            method: 'GET',\n            url: url\n        }).then(function(response) {\n            users = response.data;\n            deferred.resolve(response.data);\n        }, function() {\n            deferred.reject();\n        });\n\n        return deferred.promise;\n    };\n\n\n    service.createUser = function createUser(user) {\n        var deferred = $q.defer();\n\n        $http({\n            method: 'POST',\n            url: url,\n            data: user\n        }).then(function(response) {\n            deferred.resolve(response.data);\n            users.push(response.data);\n        }, function() {\n        });\n\n        return deferred.promise;\n    };\n\n    service.updateUser = function updateUser(user) {\n        var deferred = $q.defer();\n\n        $http({\n            method: 'PUT',\n            url: url + user.id,\n            data: user\n        }).then(function(response) {\n\n            var position = users.indexOf(user);\n            users[position] = response.data;\n            deferred.resolve(response.data);\n\n        }, function() {\n        });\n\n        return deferred.promise;\n    };\n\n\n    service.deleteUser = function deleteUser(user) {\n        var deferred = $q.defer();\n\n        $http({\n            method: 'DELETE',\n            url: url + user.id\n        }).then(function(response) {\n\n            var position = users.indexOf(user);\n            users.splice(position, 1);\n            deferred.resolve(response.data);\n\n        }, function() {\n        });\n\n        return deferred.promise;\n    };\n\n    return service;\n};\n","'use strict';\n\nangular.module('user', [])\n    .controller('UserController', require('./controllers/UserController'))\n    .controller('RemoveUserController', require('./controllers/RemoveUserController'))\n    .service('users', require('./services/users'))\n    .config(function ($stateProvider) {\n        $stateProvider.state('user', {\n            url: '/user',\n            templateUrl: 'app/user/partials/user.html',\n            controller: 'UserController'\n        });\n    })\n;\n\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function() {\r\n\r\n};\r\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function($http, $q, WS_ROOT_URL) {\r\n    var service = {};\r\n    var url = WS_ROOT_URL + 'versions/';\r\n    var versions = [];\r\n\r\n    /**\r\n     * Get all versions for the project in params\r\n     * @param project\r\n     */\r\n    service.getVersionsByProjects = function getVersionsByProjects(project) {\r\n        var deferred = $q.defer();\r\n\r\n        if(versions[project.id]) {\r\n            deferred.resolve(versions[project.id]);\r\n            return deferred.promise;\r\n        }\r\n\r\n        $http({\r\n            method: 'GET',\r\n            url: url,\r\n            params: {\r\n                /*jshint camelcase:false*/\r\n                projectId: project.id\r\n            }\r\n        }).then(function(response) {\r\n            versions[project.id] = response.data;\r\n            deferred.resolve(response.data);\r\n        }, function() {\r\n\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    /**\r\n     * Only in cache memory\r\n     */\r\n    service.getAllVersions = function getAllVersions() {\r\n        var agreVersions = [];\r\n\r\n        for(var i = 0; i<versions.length; i++) {\r\n            agreVersions.push(versions[i]);\r\n        }\r\n        return agreVersions;\r\n    };\r\n\r\n    return service;\r\n};\r\n","'use strict';\r\n\r\nangular.module('version', [])\r\n    .controller('VersionController', require('./controllers/VersionController'))\r\n    .service('versions', require('./services/versions'))\r\n    .config(function ($stateProvider) {\r\n        $stateProvider.state('version', {\r\n            url: '/version',\r\n            templateUrl: 'app/version/partials/version.html',\r\n            controller: 'VersionController'\r\n        });\r\n    })\r\n;\r\n\r\n","'use strict';\r\n/*@ngInject*/\r\nmodule.exports = function (account) {\r\n    return {\r\n        replace: true,\r\n        controllerAs: 'NavigationController',\r\n        controller: function($scope, $state){\r\n\r\n            /**\r\n             * Test if the menu navigation must be displayed on this state\r\n             * @returns {boolean}\r\n             */\r\n            $scope.navigationActive = function navigationActive() {\r\n                return !$state.is('auth');\r\n            };\r\n\r\n            /**\r\n             * Logout the user, destroy the session and redirect to the auth page\r\n             */\r\n            $scope.logout = function logout() {\r\n                account.logout();\r\n                $state.go('auth');\r\n            };\r\n\r\n            /**\r\n             * Check if the item in the menu is linked to a state\r\n             * @param item\r\n             * @returns {boolean}\r\n             */\r\n            $scope.itemIsSelected = function itemIsSelected(item) {\r\n                return $state.current.name.indexOf(item) >= 0;\r\n            };\r\n\r\n            /**\r\n             * When the menu appear\r\n             */\r\n            $scope.appear = function appear() {\r\n                var user = account.getUser();\r\n                $scope.account = user;\r\n            };\r\n\r\n            /**\r\n             * Get the avatar from gravatar\r\n             * @returns {string}\r\n             */\r\n            $scope.getAvatar = function getAvatar() {\r\n                if($scope.account) {\r\n                    return 'https://secure.gravatar.com/avatar/' + CryptoJS.MD5($scope.account.email) + '?d=mm';\r\n                }\r\n            };\r\n\r\n        },\r\n        templateUrl: 'components/navigation/partials/heimdall-navigation.html'\r\n    };\r\n};\r\n","'use strict';\n\nangular.module('navigation', [])\n    .directive('heimdallNavigation', require('./directives/heimdallNavigation.directive.js'))\n\n;\n\n","'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($state, loading) {\n    return {\n        restrict: 'E',\n        replace: true,\n        link: function (scope) {\n            function testIfSecure(stateName) {\n                if (stateName !== 'auth' && stateName) {\n                    scope.display = true;\n                    loading.init()\n                        .then(function() {\n                            scope.display = false;\n                        });\n                } else {\n                    scope.display = false;\n                }\n            }\n            testIfSecure($state.current.name);\n\n            /**\n             * Listen when we change to another state\n             * So add a className based on the current path\n             */\n            scope.$on('$stateChangeStart', function (e, toState) {\n                testIfSecure(toState.name);\n            });\n        },\n        templateUrl: '../partials/loader.html'\n    };\n};\n","/**\n * stateClassName directive\n * Bind a custom class based on the current state\n */\n'use strict';\n\n/*@ngInject*/\nmodule.exports = function ($state) {\n    /**\n     * Construct a className based on a state and a custom prefix\n     * The default one is page-, customize it by adding a value to the directive\n     * @param  {String} path   State name\n     * @param  {String} prefix Custom prefix\n     * @return {String}        ClassName\n     */\n    function className(path, prefix) {\n        path = path || 'root';\n        prefix = prefix || 'page-';\n        return prefix + path.replace(/\\./g, '-').toLowerCase();\n    }\n\n    return {\n        restrict: 'A',\n        scope:true,\n        link: function (scope, el, attr) {\n\n            el.addClass(className($state.current.name, attr.stateClassName));\n\n            /**\n             * Listen when we change to another state\n             * So add a className based on the current path\n             */\n            scope.$on('$stateChangeStart', function (e, toState, current, previousState) {\n\n                el.removeClass('page-root');\n                if(previousState) {\n                    el.removeClass(className(previousState.name, attr.stateClassName));\n                }\n                el.addClass(className(toState.name, attr.stateClassName));\n\n            });\n        }\n    };\n};\n","'use strict';\n/*@ngInject*/\nmodule.exports = function (vModal) {\n    var service = {};\n    service.model = {};\n\n    /**\n     * Init the view for the modal\n     * @param params\n     * @returns {*}\n     */\n    service.view = function(params) {\n\n        if(params) {\n            service.instance = vModal(params);\n        }\n        if(!service.instance){\n            console.log('This modal was not instanciated yet');\n        }\n        return service.instance;\n    };\n\n    return service;\n};\n","'use strict';\r\n\r\n/*@ngInject*/\r\nmodule.exports = function ($q, account, projects, versions, builds, users) {\r\n    var service = {};\r\n\r\n    /**\r\n     * Load all the data\r\n     * @returns {Promise}\r\n     */\r\n    service.init = function init() {\r\n\r\n        var deferred = $q.defer();\r\n\r\n        var projectsLoaded = false;\r\n        var usersLoaded = false;\r\n\r\n        service.loadProject().then(function () {\r\n            projectsLoaded = true;\r\n            if(usersLoaded) {\r\n                deferred.resolve();\r\n            }\r\n        });\r\n\r\n        service.loadUsers().then(function() {\r\n            usersLoaded = true;\r\n            if(projectsLoaded) {\r\n                deferred.resolve();\r\n            }\r\n        });\r\n\r\n        return deferred.promise;\r\n    };\r\n\r\n    service.loadProject = function loadProject() {\r\n        var deferred = $q.defer();\r\n        var versionsOk = false;\r\n        var buildsOk = false;\r\n\r\n        projects.getProjects(account.getUser())\r\n            .then(function (projects) {\r\n                if (projects.length === 0) {\r\n                    console.log('Projects are Loaded (empty)');\r\n                    deferred.resolve();\r\n                }\r\n\r\n                service.loadVersions(projects).then(function() {\r\n                    versionsOk = true;\r\n                    if(buildsOk) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n\r\n                service.loadBuilds(projects).then(function() {\r\n                    buildsOk = true;\r\n                    if(versionsOk) {\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n            });\r\n        return deferred.promise;\r\n    };\r\n\r\n    /* jshint ignore:start */\r\n    service.loadBuilds = function loadBuilds(projects) {\r\n        var deferred = $q.defer();\r\n\r\n        var projectCpt = 0;\r\n        for (var i = 0; i < projects.length; i++) {\r\n\r\n            builds.getBuildsByProject(projects[i])\r\n                .then(function () {\r\n                    projectCpt++;\r\n                    if (projectCpt >= projects.length) {\r\n                        console.log('Builds are loaded');\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n        }\r\n\r\n        return deferred.promise;\r\n    };\r\n    /* jshint ignore:end */\r\n\r\n    /* jshint ignore:start */\r\n    service.loadVersions = function loadVersions(projects) {\r\n        var deferred = $q.defer();\r\n\r\n        var projectCpt = 0;\r\n        for (var i = 0; i < projects.length; i++) {\r\n            versions.getVersionsByProjects(projects[i])\r\n                .then(function () {\r\n                    projectCpt++;\r\n                    if (projectCpt >= projects.length) {\r\n                        console.log('Versions are loaded');\r\n                        deferred.resolve();\r\n                    }\r\n                });\r\n\r\n        }\r\n        return deferred.promise;\r\n    };\r\n    /* jshint ignore:end */\r\n\r\n    service.loadUsers = function loadUsers() {\r\n        var deferred = $q.defer();\r\n        users.getUsers().then(function(){\r\n            console.log('Users are loaded');\r\n            deferred.resolve();\r\n        });\r\n        return deferred.promise;\r\n    };\r\n\r\n    return service;\r\n};\r\n\r\n"],"sourceRoot":"/source/"}